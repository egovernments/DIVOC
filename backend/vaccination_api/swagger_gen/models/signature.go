// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Signature The Signature Schema for the registry
//
// swagger:model signature
type Signature struct {

	// at type
	// Required: true
	// Enum: [sc:LinkedDataSignature2015 sc:GraphSignature2012 sc:RsaSignature2018]
	AtType *string `json:"@type"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// creator
	// Required: true
	// Format: uri
	Creator *strfmt.URI `json:"creator"`

	// nonce
	Nonce string `json:"nonce,omitempty"`

	// signature for
	// Required: true
	SignatureFor *string `json:"signatureFor"`

	// signature value
	// Required: true
	SignatureValue *string `json:"signatureValue"`
}

// Validate validates this signature
func (m *Signature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureFor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var signatureTypeAtTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sc:LinkedDataSignature2015","sc:GraphSignature2012","sc:RsaSignature2018"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signatureTypeAtTypePropEnum = append(signatureTypeAtTypePropEnum, v)
	}
}

const (

	// SignatureAtTypeScLinkedDataSignature2015 captures enum value "sc:LinkedDataSignature2015"
	SignatureAtTypeScLinkedDataSignature2015 string = "sc:LinkedDataSignature2015"

	// SignatureAtTypeScGraphSignature2012 captures enum value "sc:GraphSignature2012"
	SignatureAtTypeScGraphSignature2012 string = "sc:GraphSignature2012"

	// SignatureAtTypeScRsaSignature2018 captures enum value "sc:RsaSignature2018"
	SignatureAtTypeScRsaSignature2018 string = "sc:RsaSignature2018"
)

// prop value enum
func (m *Signature) validateAtTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, signatureTypeAtTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Signature) validateAtType(formats strfmt.Registry) error {

	if err := validate.Required("@type", "body", m.AtType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAtTypeEnum("@type", "body", *m.AtType); err != nil {
		return err
	}

	return nil
}

func (m *Signature) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Signature) validateCreator(formats strfmt.Registry) error {

	if err := validate.Required("creator", "body", m.Creator); err != nil {
		return err
	}

	if err := validate.FormatOf("creator", "body", "uri", m.Creator.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Signature) validateSignatureFor(formats strfmt.Registry) error {

	if err := validate.Required("signatureFor", "body", m.SignatureFor); err != nil {
		return err
	}

	return nil
}

func (m *Signature) validateSignatureValue(formats strfmt.Registry) error {

	if err := validate.Required("signatureValue", "body", m.SignatureValue); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Signature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Signature) UnmarshalBinary(b []byte) error {
	var res Signature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
