// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Program program
//
// swagger:model Program
type Program struct {

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// logo URL
	LogoURL string `json:"logoURL,omitempty"`

	// medicines
	Medicines []*ProgramMedicinesItems0 `json:"medicines"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this program
func (m *Program) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMedicines(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Program) validateMedicines(formats strfmt.Registry) error {

	if swag.IsZero(m.Medicines) { // not required
		return nil
	}

	for i := 0; i < len(m.Medicines); i++ {
		if swag.IsZero(m.Medicines[i]) { // not required
			continue
		}

		if m.Medicines[i] != nil {
			if err := m.Medicines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("medicines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Program) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Program) UnmarshalBinary(b []byte) error {
	var res Program
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProgramMedicinesItems0 medicine
//
// swagger:model ProgramMedicinesItems0
type ProgramMedicinesItems0 struct {

	// Number of months the vaccination is effective
	EffectiveUntil int64 `json:"effectiveUntil,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// provider
	Provider string `json:"provider,omitempty"`

	// schedule
	Schedule *ProgramMedicinesItems0Schedule `json:"schedule,omitempty"`

	// status
	// Enum: [Active Inactive Blocked]
	Status string `json:"status,omitempty"`

	// vaccination mode
	// Enum: [muscular injection oral nasal]
	VaccinationMode string `json:"vaccinationMode,omitempty"`
}

// Validate validates this program medicines items0
func (m *ProgramMedicinesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaccinationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProgramMedicinesItems0) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

var programMedicinesItems0TypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","Blocked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		programMedicinesItems0TypeStatusPropEnum = append(programMedicinesItems0TypeStatusPropEnum, v)
	}
}

const (

	// ProgramMedicinesItems0StatusActive captures enum value "Active"
	ProgramMedicinesItems0StatusActive string = "Active"

	// ProgramMedicinesItems0StatusInactive captures enum value "Inactive"
	ProgramMedicinesItems0StatusInactive string = "Inactive"

	// ProgramMedicinesItems0StatusBlocked captures enum value "Blocked"
	ProgramMedicinesItems0StatusBlocked string = "Blocked"
)

// prop value enum
func (m *ProgramMedicinesItems0) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, programMedicinesItems0TypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProgramMedicinesItems0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var programMedicinesItems0TypeVaccinationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["muscular injection","oral","nasal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		programMedicinesItems0TypeVaccinationModePropEnum = append(programMedicinesItems0TypeVaccinationModePropEnum, v)
	}
}

const (

	// ProgramMedicinesItems0VaccinationModeMuscularInjection captures enum value "muscular injection"
	ProgramMedicinesItems0VaccinationModeMuscularInjection string = "muscular injection"

	// ProgramMedicinesItems0VaccinationModeOral captures enum value "oral"
	ProgramMedicinesItems0VaccinationModeOral string = "oral"

	// ProgramMedicinesItems0VaccinationModeNasal captures enum value "nasal"
	ProgramMedicinesItems0VaccinationModeNasal string = "nasal"
)

// prop value enum
func (m *ProgramMedicinesItems0) validateVaccinationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, programMedicinesItems0TypeVaccinationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProgramMedicinesItems0) validateVaccinationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.VaccinationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateVaccinationModeEnum("vaccinationMode", "body", m.VaccinationMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProgramMedicinesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProgramMedicinesItems0) UnmarshalBinary(b []byte) error {
	var res ProgramMedicinesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProgramMedicinesItems0Schedule program medicines items0 schedule
//
// swagger:model ProgramMedicinesItems0Schedule
type ProgramMedicinesItems0Schedule struct {

	// repeat interval
	RepeatInterval int64 `json:"repeatInterval,omitempty"`

	// repeat times
	RepeatTimes int64 `json:"repeatTimes,omitempty"`
}

// Validate validates this program medicines items0 schedule
func (m *ProgramMedicinesItems0Schedule) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProgramMedicinesItems0Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProgramMedicinesItems0Schedule) UnmarshalBinary(b []byte) error {
	var res ProgramMedicinesItems0Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
