// Code generated by go-swagger; DO NOT EDIT.

package vaccination

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/divoc/api/swagger_gen/models"
)

// GetPreEnrollmentHandlerFunc turns a function with the right signature into a get pre enrollment handler
type GetPreEnrollmentHandlerFunc func(GetPreEnrollmentParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPreEnrollmentHandlerFunc) Handle(params GetPreEnrollmentParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// GetPreEnrollmentHandler interface for that can handle valid get pre enrollment params
type GetPreEnrollmentHandler interface {
	Handle(GetPreEnrollmentParams, *models.JWTClaimBody) middleware.Responder
}

// NewGetPreEnrollment creates a new http.Handler for the get pre enrollment operation
func NewGetPreEnrollment(ctx *middleware.Context, handler GetPreEnrollmentHandler) *GetPreEnrollment {
	return &GetPreEnrollment{Context: ctx, Handler: handler}
}

/*GetPreEnrollment swagger:route GET /v1/preEnrollments/{preEnrollmentCode} vaccination getPreEnrollment

Get pre enrollment information

Get pre enrollment data from api for vaccination

*/
type GetPreEnrollment struct {
	Context *middleware.Context
	Handler GetPreEnrollmentHandler
}

func (o *GetPreEnrollment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPreEnrollmentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
