// Code generated by go-swagger; DO NOT EDIT.

package certificate_revoked

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CertificateRevokedHandlerFunc turns a function with the right signature into a certificate revoked handler
type CertificateRevokedHandlerFunc func(CertificateRevokedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CertificateRevokedHandlerFunc) Handle(params CertificateRevokedParams) middleware.Responder {
	return fn(params)
}

// CertificateRevokedHandler interface for that can handle valid certificate revoked params
type CertificateRevokedHandler interface {
	Handle(CertificateRevokedParams) middleware.Responder
}

// NewCertificateRevoked creates a new http.Handler for the certificate revoked operation
func NewCertificateRevoked(ctx *middleware.Context, handler CertificateRevokedHandler) *CertificateRevoked {
	return &CertificateRevoked{Context: ctx, Handler: handler}
}

/*CertificateRevoked swagger:route POST /v1/certificate/revoked certificateRevoked certificateRevoked

Check if given certificate is revoked

*/
type CertificateRevoked struct {
	Context *middleware.Context
	Handler CertificateRevokedHandler
}

func (o *CertificateRevoked) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCertificateRevokedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
