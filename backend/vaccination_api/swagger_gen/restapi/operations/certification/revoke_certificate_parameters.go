// Code generated by go-swagger; DO NOT EDIT.

package certification

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewRevokeCertificateParams creates a new RevokeCertificateParams object
// no default values defined in spec.
func NewRevokeCertificateParams() RevokeCertificateParams {

	return RevokeCertificateParams{}
}

// RevokeCertificateParams contains all the bound params for the revoke certificate operation
// typically these are obtained from a http.Request
//
// swagger:parameters revokeCertificate
type RevokeCertificateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*dose for which certificate needs to be revoked
	  Required: true
	  In: query
	*/
	Dose float64
	/*refId for which certificate needs to be revoked
	  Required: true
	  In: query
	*/
	PreEnrollmentCode string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRevokeCertificateParams() beforehand.
func (o *RevokeCertificateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDose, qhkDose, _ := qs.GetOK("dose")
	if err := o.bindDose(qDose, qhkDose, route.Formats); err != nil {
		res = append(res, err)
	}

	qPreEnrollmentCode, qhkPreEnrollmentCode, _ := qs.GetOK("preEnrollmentCode")
	if err := o.bindPreEnrollmentCode(qPreEnrollmentCode, qhkPreEnrollmentCode, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDose binds and validates parameter Dose from query.
func (o *RevokeCertificateParams) bindDose(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("dose", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("dose", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertFloat64(raw)
	if err != nil {
		return errors.InvalidType("dose", "query", "float64", raw)
	}
	o.Dose = value

	return nil
}

// bindPreEnrollmentCode binds and validates parameter PreEnrollmentCode from query.
func (o *RevokeCertificateParams) bindPreEnrollmentCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("preEnrollmentCode", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("preEnrollmentCode", "query", raw); err != nil {
		return err
	}

	o.PreEnrollmentCode = raw

	return nil
}
