// Code generated by go-swagger; DO NOT EDIT.

package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/divoc/api/swagger_gen/models"
)

// PostV1IdentityVerifyHandlerFunc turns a function with the right signature into a post v1 identity verify handler
type PostV1IdentityVerifyHandlerFunc func(PostV1IdentityVerifyParams, *models.JWTClaimBody) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1IdentityVerifyHandlerFunc) Handle(params PostV1IdentityVerifyParams, principal *models.JWTClaimBody) middleware.Responder {
	return fn(params, principal)
}

// PostV1IdentityVerifyHandler interface for that can handle valid post v1 identity verify params
type PostV1IdentityVerifyHandler interface {
	Handle(PostV1IdentityVerifyParams, *models.JWTClaimBody) middleware.Responder
}

// NewPostV1IdentityVerify creates a new http.Handler for the post v1 identity verify operation
func NewPostV1IdentityVerify(ctx *middleware.Context, handler PostV1IdentityVerifyHandler) *PostV1IdentityVerify {
	return &PostV1IdentityVerify{Context: ctx, Handler: handler}
}

/*PostV1IdentityVerify swagger:route POST /v1/identity/verify identity postV1IdentityVerify

Validate identity if the person

*/
type PostV1IdentityVerify struct {
	Context *middleware.Context
	Handler PostV1IdentityVerifyHandler
}

func (o *PostV1IdentityVerify) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1IdentityVerifyParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.JWTClaimBody
	if uprinc != nil {
		principal = uprinc.(*models.JWTClaimBody) // this is really a models.JWTClaimBody, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
