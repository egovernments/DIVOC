version: "2.4"

services:
  redis:
    image: redis
    ports:
      - "6379:6379"
  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
        test: ["CMD", "curl", "-f", "localhost:9200/_cluster/health"]
        interval: 30s
        timeout: 10s
        retries: 4
  db:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=registry
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./flagr_dump.sql:/docker-entrypoint-initdb.d/flagr_dump.sql
  registry:
    image: divoc/registry-es
    environment:
      - connectionInfo_uri=jdbc:postgresql://db:5432/registry
      - connectionInfo_username=postgres
      - connectionInfo_password=postgres
      - elastic_search_connection_url=es:9200
      - search_providerName=dev.sunbirdrc.registry.service.ElasticSearchService
      - registry_base_apis_enable=true
      - signature_enabled=false
      - taskExecutor_index_queueCapacity=100
      - auditTaskExecutor_queueCapacity=100
    ports:
      - "8081:8081"
    depends_on:
      es:
        condition: service_healthy
      db:
        condition: service_started
  keycloak:
    image: divoc/keycloak
    environment:
      - DB_VENDOR=postgres
      - DB_ADDR=db
      - DB_PORT=5432
      - DB_DATABASE=registry
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
    #      - ./keycloak-mobile-number-login-spi/themes:/opt/jboss/keycloak/themes/
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9990/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "8080:8080"
      - "9990:9990"
    depends_on:
      db:
        condition: service_started
  flagr:
    image: checkr/flagr
    environment:
      FLAGR_DB_DBDRIVER: postgres
      FLAGR_DB_DBCONNECTIONSTR: "$FLAGR_DB_DBCONNECTIONSTR"
      HOST: 0.0.0.0
      FLAGR_WEB_PREFIX: /config
    ports:
      - "18000:18000"
    depends_on:
      db:
        condition: service_started
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
  kafka:
    image: confluentinc/cp-kafka:5.2.5-10
    depends_on:
      zookeeper:
        condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:9092,OUTSIDE://localhost:9094"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
    healthcheck:
      test:
        ["CMD", "kafka-topics", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 30s
      timeout: 10s
      retries: 4
  clickhouse-server:
    image: yandex/clickhouse-server
    ports:
      - "8123:8123"
      - "9000:9000"
  vaccination-api:
    image: divoc/vaccination_api
    environment:
      REGISTRY_URL: "http://registry:8081"
      REGISTRY_WITH_ES_URL: "http://registry-es:8081"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KEYCLOAK_URL: "http://keycloak:8080/auth"
      DB_HOST: db
      REDIS_URL: redis://redis:6379
      ENABLE_KEYCLOAK: "true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
  portal-api:
    image: divoc/portal_api
    ports:
      - "8001:8001"
    environment:
      REGISTRY_URL: "http://registry:8081"
      REGISTRY_WITH_ES_URL: "http://registry-es:8081"
      KEYCLOAK_URL: "http://keycloak:8080/auth"
      CLICK_HOUSE_URL: tcp://clickhouse-server:9000?debug=true
      ADMIN_API_CLIENT_SECRET: "$ADMIN_API_CLIENT_SECRET"
      DB_HOST: db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
  registration-api:
    image: divoc/registration_api
    ports:
      - "8002:8002"
    environment:
      REDIS_URL: redis://redis:6379
      REGISTRY_URL: "http://registry:8081"
      REGISTRY_WITH_ES_URL: "http://registry-es:8081"
      KEYCLOAK_URL: "http://keycloak:8080/auth"
      DB_HOST: db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      # in min
      CACHE_TTL: 60
      AUTH_PRIVATE_KEY: "$AUTH_PRIVATE_KEY"
      AUTH_PUBLIC_KEY: "$AUTH_PUBLIC_KEY"
    depends_on:
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy  
  analytics-feed:
    image: divoc/analytics_feed
    environment:
      CLICK_HOUSE_URL: tcp://clickhouse-server:9000?debug=true
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      clickhouse-server:
        condition: service_started
  certificate-processor:
    image: divoc/certificate_processor
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REGISTRY_URL: "http://registry:8081"
      REGISTRY_WITH_ES_URL: "http://registry-es:8081"
      KEYCLOAK_URL: "http://keycloak:8080/auth"
      ADMIN_API_CLIENT_SECRET: "$ADMIN_API_CLIENT_SECRET"
      REDIS_URL: "redis://redis:6379"
      ENABLE_PROGRAM_ID_CACHING_KEY: "true"
      ENABLE_CREATE_RECIPIENT_IN_KEYCLOAK_SERVICE: "true"
      ENABLE_REVOKE_CERTIFICATION_SERVICE: "true"
    depends_on:
      registry:
        condition: service_started
  certificate-signer:
    image: divoc/certificate_signer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REGISTRY_URL: "http://registry:8081"
      REGISTRY_WITH_ES_URL: "http://registry-es:8081"
      REDIS_URL: redis://redis:6379
      CERTIFICATE_NAMESPACE: "https://cowin.gov.in/credentials/vaccination/v1"
      CERTIFICATE_NAMESPACE_V2: "https://cowin.gov.in/credentials/vaccination/v2"
      CERTIFICATE_CONTROLLER_ID: "https://cowin.gov.in/"
      CERTIFICATE_PUBKEY_ID: "https://example.com/i/india"
      CERTIFICATE_DID: "did:india"
      CERTIFICATE_ISSUER: "https://cowin.gov.in/"
      CERTIFICATE_BASE_URL: "https://cowin.gov.in/vaccine/"
      CERTIFICATE_FEEDBACK_BASE_URL: "https://cowin.gov.in/?"
      CERTIFICATE_INFO_BASE_URL: "https://cowin.gov.in/?"
      CERTIFICATE_PUBLIC_KEY: "$CERTIFICATE_SIGNER_PUBLIC_KEY"
      CERTIFICATE_PRIVATE_KEY: "$CERTIFICATE_SIGNER_PRIVATE_KEY"
      SIGNING_KEY_TYPE: "$SIGNING_KEY_TYPE"
      FACILITY_COUNTRY_CODE: "IND"
      ETCD_URL: $ETCD_URL
      ETCD_AUTH_ENABLED: $ETCD_AUTH_ENABLED
      ETCD_USERNAME: $ETCD_USERNAME
      ETCD_PASSWORD: $ETCD_PASSWORD
      CONFIGURATION_LAYER: "etcd"
    depends_on:
      kafka:
        condition: service_healthy
  test-certificate-signer:
    image: divoc/test_certificate_signer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REGISTRY_URL: "http://registry:8081"
      REGISTRY_WITH_ES_URL: "http://registry-es:8081"
      REDIS_URL: redis://redis:6379
      CERTIFICATE_NAMESPACE: "https://cowin.gov.in/credentials/testCertificate/v1"
      CERTIFICATE_CONTROLLER_ID: "https://cowin.gov.in/"
      CERTIFICATE_PUBKEY_ID: "https://example.com/i/india"
      CERTIFICATE_DID: "did:india"
      CERTIFICATE_ISSUER: "https://cowin.gov.in/"
      CERTIFICATE_BASE_URL: "https://cowin.gov.in/test/"
      CERTIFICATE_FEEDBACK_BASE_URL: "https://cowin.gov.in/?"
      CERTIFICATE_INFO_BASE_URL: "https://cowin.gov.in/?"
      CERTIFICATE_PUBLIC_KEY: "$CERTIFICATE_TEST_SIGNER_PUBLIC_KEY"
      CERTIFICATE_PRIVATE_KEY: "$CERTIFICATE_TEST_SIGNER_PRIVATE_KEY"
      SIGNING_KEY_TYPE: "$SIGNING_KEY_TYPE"
    depends_on:
      kafka:
        condition: service_healthy
  gateway:
    image: divoc/gateway
    ports:
      - "80:80"
    depends_on:
      vaccination-api:
        condition: service_started
      portal-api:
        condition: service_started
      registration-api:
        condition: service_started
      digilocker-support-api:
        condition: service_started
  notification-service:
    image: divoc/notification-service
    ports:
      - "8765:8765"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SMS_AUTH_KEY: xxxx
      SENDER_EMAIL: xxxx@mail.com
      SENDER_PASSWORD: xxxx
    depends_on:
      kafka:
        condition: service_healthy
  digilocker-support-api:
    image: divoc/digilocker_support_api
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REGISTRY_URL: "http://registry:8081"
      REGISTRY_WITH_ES_URL: "http://registry-es:8081"
      DIGILOCKER_HMAC_AUTHKEY: "UPDATE_KEY_GIVEN_IN_DIGILOCKER"
      KEYCLOAK_URL: "http://keycloak:8080/auth"
      REGISTRATION_API_PUBLIC_KEY: "$REGISTRATION_API_PUBLIC_KEY"
    depends_on:
      kafka:
        condition: service_healthy
      keycloak:
        condition: service_healthy
  certificate-api:
    image: divoc/certificate_api
    ports:
      - "4321:4321"
    environment:
      KEYCLOAK_URL: "http://keycloak:8080/auth"
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REGISTRY_URL: "http://registry:8081"
      AUTH_PUBLIC_KEY: "$CERTIFICATE_API_AUTH_PUBLIC_KEY"
      CERTIFICATE_PUBLIC_KEY: "$CERTIFICATE_API_PUBLIC_KEY"
      EU_CERTIFICATE_PUBLIC_KEY: "$EU_CERTIFICATE_PUBLIC_KEY"
      CERTIFICATE_PRIVATE_KEY: "$CERTIFICATE_API_PRIVATE_KEY"
      EU_CERTIFICATE_PRIVATE_KEY: "$EU_CERTIFICATE_PRIVATE_KEY"
      SHC_CERTIFICATE_PRIVATE_KEY: "$SHC_CERTIFICATE_PRIVATE_KEY"
      EU_CERTIFICATE_EXPIRY: 12
      SHC_CERTIFICATE_EXPIRY: 12
      CERTIFICATE_ISSUER: "https://divoc.dev"
      FHIR_PUBLIC_HEALTH_AUTHORITY: "Govt Of India"
      DISEASE_CODE: "COVID-19"
      REDIS_URL: redis://redis:6379
      REDIS_KEY_EXPIRE: 172800
      REDIS_ENABLED: "true"
      ETCD_URL: $ETCD_URL
      ETCD_AUTH_ENABLED: $ETCD_AUTH_ENABLED
      CONFIGURATION_LAYER: "etcd"
      ETCD_USERNAME: $ETCD_USERNAME
      ETCD_PASSWORD: $ETCD_PASSWORD
    depends_on:
      kafka:
        condition: service_healthy
  etcd:
    image: gcr.io/etcd-development/etcd:v3.5.1
    entrypoint: /usr/local/bin/etcd
    environment: 
      ETCD_NAME: '$ETCD_NAME'
      ETCD_DATA_DIR: '$ETCD_DATA_DIR'
      ETCD_LISTEN_CLIENT_URLS: '$ETCD_LISTEN_CLIENT_URLS'
      ETCD_ADVERTISE_CLIENT_URLS: '$ETCD_ADVERTISE_CLIENT_URLS'
      ETCD_LISTEN_PEER_URLS: '$ETCD_LISTEN_PEER_URLS'
      ETCD_INITIAL_ADVERTISE_PEER_URLS: '$ETCD_ADVERTISE_PEER_URLS'
      ETCD_INITIAL_CLUSTER: '$ETCD_NAME=$ETCD_INITIAL_CLUSTER'
      ETCD_INITIAL_CLUSTER_TOKEN: '$ETCD_INITIAL_CLUSTER_TOKEN'
      ETCD_INITIAL_CLUSTER_STATE: '$ETCD_INITIAL_CLUSTER_STATE'
      ETCD_LOG_LEVEL: '$ETCD_LOG_LEVEL'
      ETCD_LOGGER: '$ETCD_LOGGER'
      ETCD_LOG_OUTPUTS: '$ETCD_LOG_OUTPUTS'
    ports:
      - $ETCD_CLIENT_CONNECTIONS_PORT:$ETCD_CLIENT_CONNECTIONS_PORT
      - $ETCD_PEER_CONNECTIONS_PORT:$ETCD_PEER_CONNECTIONS_PORT
